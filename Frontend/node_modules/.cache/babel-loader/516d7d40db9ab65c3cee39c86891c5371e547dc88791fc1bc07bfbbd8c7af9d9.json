{"ast":null,"code":"import Axios from 'axios';\n\n// Utility function to get cookies\nexport function getCookie(name) {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n  return null;\n}\n\n// Create an Axios instance\nconst axios = Axios.create({\n  baseURL: 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Function to get CSRF token\n// async function getCSRFToken() {\n//     try {\n//         await axios.get('/sanctum/csrf-cookie');\n//     } catch (error) {\n//         console.error('Failed to fetch CSRF token:', error);\n//     }\n// }\n\n// Set default headers for CSRF token and Authorization token\naxios.interceptors.request.use(async config => {\n  const csrfToken = getCookie('XSRF-TOKEN');\n  const authToken = localStorage.getItem('auth_token');\n  if (csrfToken) {\n    config.headers['X-XSRF-TOKEN'] = csrfToken;\n  }\n  if (authToken) {\n    config.headers['Authorization'] = `Bearer ${authToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["Axios","getCookie","name","value","document","cookie","parts","split","length","pop","shift","axios","create","baseURL","headers","withCredentials","interceptors","request","use","config","csrfToken","authToken","localStorage","getItem","error","Promise","reject"],"sources":["C:/Users/AL AZAMI/Desktop/frontend/src/axios.js"],"sourcesContent":["import Axios from 'axios';\r\n\r\n// Utility function to get cookies\r\nexport function getCookie(name) {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop().split(';').shift();\r\n    return null;\r\n}\r\n\r\n// Create an Axios instance\r\nconst axios = Axios.create({\r\n    baseURL: 'http://localhost:8000',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n    },\r\n    withCredentials: true,\r\n});\r\n\r\n// Function to get CSRF token\r\n// async function getCSRFToken() {\r\n//     try {\r\n//         await axios.get('/sanctum/csrf-cookie');\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch CSRF token:', error);\r\n//     }\r\n// }\r\n\r\n// Set default headers for CSRF token and Authorization token\r\naxios.interceptors.request.use(async (config) => {\r\n    const csrfToken = getCookie('XSRF-TOKEN');\r\n    const authToken = localStorage.getItem('auth_token');\r\n\r\n    if (csrfToken) {\r\n        config.headers['X-XSRF-TOKEN'] = csrfToken;\r\n    }\r\n\r\n    if (authToken) {\r\n        config.headers['Authorization'] = `Bearer ${authToken}`;\r\n    }\r\n\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axios;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,SAASC,SAASA,CAACC,IAAI,EAAE;EAC5B,MAAMC,KAAK,GAAI,KAAIC,QAAQ,CAACC,MAAO,EAAC;EACpC,MAAMC,KAAK,GAAGH,KAAK,CAACI,KAAK,CAAE,KAAIL,IAAK,GAAE,CAAC;EACvC,IAAII,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOF,KAAK,CAACG,GAAG,CAAC,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC;EAC7D,OAAO,IAAI;AACf;;AAEA;AACA,MAAMC,KAAK,GAAGX,KAAK,CAACY,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACd,CAAC;EACDC,eAAe,EAAE;AACrB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAJ,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C,MAAMC,SAAS,GAAGnB,SAAS,CAAC,YAAY,CAAC;EACzC,MAAMoB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAEpD,IAAIH,SAAS,EAAE;IACXD,MAAM,CAACL,OAAO,CAAC,cAAc,CAAC,GAAGM,SAAS;EAC9C;EAEA,IAAIC,SAAS,EAAE;IACXF,MAAM,CAACL,OAAO,CAAC,eAAe,CAAC,GAAI,UAASO,SAAU,EAAC;EAC3D;EAEA,OAAOF,MAAM;AACjB,CAAC,EAAEK,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEF,eAAeb,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}